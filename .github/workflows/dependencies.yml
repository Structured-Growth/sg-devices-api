name: Generate list of software dependencies and security

on:
  workflow_call:
    secrets:
      NPM_AUTH_TOKEN:
        required: true

jobs:
  generate-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm cache clean --force
          GITHUB_TOKEN=${{ secrets.NPM_AUTH_TOKEN }} npm install

      - name: Generate dependencies HTML report with vulnerabilities
        run: |
          echo "📂 Creating reports directory..."
          mkdir -p reports

          echo "📄 Generating HTML report..."
          node -e '
          const fs = require("fs");
          const path = require("path");
          const { execSync } = require("child_process");

          function flattenDeps(tree, level = 0, list = [], seen = new Set()) {
            if (!tree || !tree.dependencies) return list;
            for (const [name, info] of Object.entries(tree.dependencies)) {
              if (seen.has(info)) continue;
              seen.add(info);

              const indent = " ".repeat(level * 2);
              list.push({
                name: indent + name,
                rawName: name,
                version: info.version || "N/A"
              });

              flattenDeps(info, level + 1, list, seen);
            }
            return list;
          }

          let deps = [];
          let auditMap = {};

          try {
            console.log("🔍 Running npm ls...");
            const lsRaw = execSync("npm ls --all --json", { encoding: "utf8" });
            const lsJson = JSON.parse(lsRaw);
            deps = flattenDeps(lsJson);
            console.log(`📋 Total dependencies collected: ${deps.length}`);
          } catch (err) {
            console.error("Failed to parse npm ls:", err.message);
          }

          try {
            console.log("🔐 Running npm audit...");
            const auditRaw = execSync("npm audit --json || true", { encoding: "utf8" });
            const auditJson = JSON.parse(auditRaw);
            const vulnerabilities = auditJson.vulnerabilities || {};
            console.log(`⚠️ Packages with vulnerabilities: ${Object.keys(vulnerabilities).length}`);

            for (const [pkg, vuln] of Object.entries(vulnerabilities)) {
              const severities = {};
              vuln.via.forEach(v => {
                if (typeof v === "string") return;
                severities[v.severity] = (severities[v.severity] || 0) + 1;
              });

              const summary = Object.entries(severities).map(([s, c]) => `${s}: ${c}`).join(", ");
              const descriptions = vuln.via
                .filter(v => typeof v === "object" && v.title)
                .map(v => {
                let line = `- ${v.title}`;
                if (v.url) {
                  line += ` <a href="${v.url}" target="_blank">Details</a>`;
                }
                return line;
              })
              .join("<br>");

              auditMap[pkg] = summary + (descriptions ? "<br>" + descriptions : "");
          
              const severityCounts = {
                info: 0,
                low: 0,
                moderate: 0,
                high: 0,
                critical: 0
              };
                
              for (const [pkg, vuln] of Object.entries(vulnerabilities)) {
                vuln.via.forEach(v => {
                  if (typeof v === "object" && severityCounts[v.severity] !== undefined) {
                  severityCounts[v.severity]++;
                  }
                });
              }
                
              const totalVulns = Object.values(severityCounts).reduce((a, b) => a + b, 0);
            }
          } catch (err) {
            console.warn("npm audit failed:", err.message);
          }

          const dateStr = new Date().toLocaleString();
          let html = `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>Dependencies Report</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              table { width: 100%; border-collapse: collapse; margin-top: 20px; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; vertical-align: top; }
              th { background-color: #f4f4f4; }
              td.dependency {
                width: 30%;
                white-space: pre-wrap;
                word-break: break-word;
              }
              td.vulnerabilities {
                width: 50%;
              }
              .header { font-weight: bold; margin-bottom: 10px; }
            </style>
          </head>
          <body>
            <div class="header"><strong>Generated at:</strong> ${dateStr}</div>
            <table>
              <tr><td><strong>Total dependencies</strong></td><td>${deps.length}</td></tr>
              <tr><td><strong>Total vulnerabilities</strong></td><td>${Object.keys(auditMap).length}</td></tr>
            </table>
          
            <h3>Vulnerability Breakdown</h3>
            <ul>
              <li><strong>INFO:</strong> ${severityCounts.info}</li>
              <li><strong>LOW:</strong> ${severityCounts.low}</li>
              <li><strong>MODERATE:</strong> ${severityCounts.moderate}</li>
              <li><strong>HIGH:</strong> ${severityCounts.high}</li>
              <li><strong>CRITICAL:</strong> ${severityCounts.critical}</li>
            </ul>

            <h2>Dependencies</h2>
            <table>
              <tr><th>#</th><th>Dependency</th><th>Version</th><th>Vulnerabilities</th></tr>
          `;

          deps.forEach((dep, i) => {
            html += `<tr>
              <td>${i + 1}</td>
              <td class="dependency">${dep.name}</td>
              <td>${dep.version}</td>
              <td class="vulnerabilities">${auditMap[dep.rawName] || "-"}</td>
            </tr>`;
          });

          html += "</table></body></html>";
          fs.writeFileSync(path.join("reports", "report.html"), html);
          console.log("✅ Report created at reports/report.html");
          '

      - name: Convert HTML to PDF
        id: generate_pdf
        uses: fifsky/html-to-pdf-action@master
        with:
          htmlFile: reports/report.html
          outputFile: reports/dependencies-report.pdf
          pdfOptions: '{"format": "A4", "margin": {"top": "10mm", "left": "10mm", "right": "10mm", "bottom": "10mm"}}'
        continue-on-error: false

      - name: Debug PDF Report
        run: ls -lh reports/

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-pdf-report
          path: reports/dependencies-report.pdf